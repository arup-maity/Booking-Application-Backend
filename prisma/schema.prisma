// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider        = "prisma-client-js"
   previewFeatures = ["driverAdapters"]
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

// ======================= User Table ====================
model Users {
   id             Int              @id @default(autoincrement())
   cuid           String           @unique @default(cuid())
   fullName       String?
   email          String           @unique
   gender         String?
   dob            String?
   mobileNumber   String?          @unique
   profileImage   String?
   address        Json?
   userAuth       UserAuth?
   userAddress    UserAddress[]
   bookings       Bookings[]
   BookingProcess BookingProcess[]
   createdAt      DateTime         @default(now())
   updatedAt      DateTime         @updatedAt

   @@map("users")
}

model UserAuth {
   id       Int     @id @default(autoincrement())
   password String?
   method   String
   userId   Int     @unique
   user     Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserAddress {
   id        Int     @id @default(autoincrement())
   isDefault Boolean @default(false)
   type      String
   address   Json
   userId    Int
   user      Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ======================= Admin User Table ==============
model AdminUser {
   id            Int            @id @default(autoincrement())
   firstName     String
   lastName      String
   email         String         @unique
   role          AdminUserRole  @default(admin)
   profileImage  String?
   adminUserAuth AdminUserAuth?
   createdAt     DateTime       @default(now())
   updatedAt     DateTime       @updatedAt

   @@map("admin_user")
}

model AdminUserAuth {
   id       Int       @id @default(autoincrement())
   password String?
   method   String
   userId   Int       @unique
   user     AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum AdminUserRole {
   administrator
   admin
   customerSupport
   technicalSupport
   salesAgent
}

// ======================= City Table and Airport Table ==============
model Cities {
   id          Int        @id @default(autoincrement())
   cityName    String
   countryName String
   countryCode String
   airports    Airports[]
   createdAt   DateTime   @default(now())
   updatedAt   DateTime   @updatedAt

   @@unique([cityName, countryName])
   @@unique([cityName, countryCode])
}

model Airports {
   id              Int       @id @default(autoincrement())
   airportName     String
   iataCode        String    @unique
   address         String?
   cityId          Int
   city            Cities    @relation(fields: [cityId], references: [id], onDelete: Cascade)
   departureFlight Flights[] @relation("departureAirport_airport")
   arrivalFlight   Flights[] @relation("arrivalAirport_airport")
   createdAt       DateTime  @default(now())
   updatedAt       DateTime  @updatedAt

   @@unique([iataCode, cityId])
}

// ======================= Airplane Table ==============
model Airplanes {
   id           Int       @id @default(autoincrement())
   modelNumber  String    @unique
   manufacturer String
   capacity     Int?
   Seats        Seats?
   Flights      Flights[]
   createdAt    DateTime  @default(now())
   updatedAt    DateTime  @updatedAt

   @@unique([modelNumber, manufacturer])
}

model Seats {
   id          Int       @id @default(autoincrement())
   rowCount    Int
   columnCount Int
   type        String
   airplanesId Int       @unique
   airplanes   Airplanes @relation(fields: [airplanesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ======================= Flight Table ==============
model Flights {
   id                 Int              @id @default(autoincrement())
   flightNumber       String           @unique
   departureAirportId Int
   departureAirport   Airports         @relation(name: "departureAirport_airport", fields: [departureAirportId], references: [id], onDelete: Cascade)
   arrivalAirportId   Int
   arrivalAirport     Airports         @relation(name: "arrivalAirport_airport", fields: [arrivalAirportId], references: [id], onDelete: Cascade)
   departureTime      DateTime
   arrivalTime        DateTime
   airplaneId         Int
   airplane           Airplanes        @relation(fields: [airplaneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   price              Int
   boardingGate       String
   Bookings           Bookings[]
   BookingProcess     BookingProcess[]
   createdAt          DateTime         @default(now())
   updatedAt          DateTime         @updatedAt
}

///////////////////////////////////////////////////////////////////////
model Bookings {
   id          Int           @id @default(autoincrement())
   // cuid String @unique @default(cuid())
   flightId    Int
   flight      Flights       @relation(fields: [flightId], references: [id])
   userId      Int
   user        Users         @relation(fields: [userId], references: [id])
   status      bookingStatus @default(complete)
   passengers  Json
   totalCost   Decimal       @default(0.00)
   bookingDate DateTime      @default(now())
   payments    Payments?
   createdAt   DateTime      @default(now())
   updatedAt   DateTime      @updatedAt

   @@unique([id, flightId])
}

model Payments {
   id           Int           @id @default(autoincrement())
   bookingId    Int           @unique
   booking      Bookings      @relation(fields: [bookingId], references: [id])
   paymentId    String?
   clientSecret String?
   status       paymentStatus @default(pending)
   createdAt    DateTime      @default(now())
   updatedAt    DateTime      @updatedAt
}

model BookingProcess {
   id              Int                  @id @default(autoincrement())
   flightId        Int
   flight          Flights              @relation(fields: [flightId], references: [id])
   userId          Int
   user            Users                @relation(fields: [userId], references: [id])
   status          bookingProcessStatus @default(pending)
   passengers      Json
   totalCost       Decimal              @default(0.00)
   bookingDate     DateTime             @default(now())
   PaymentsProcess PaymentsProcess?
   createdAt       DateTime             @default(now())
   updatedAt       DateTime             @updatedAt

   @@unique([id, flightId])
}

model PaymentsProcess {
   id           Int            @id @default(autoincrement())
   bookingId    Int            @unique
   booking      BookingProcess @relation(fields: [bookingId], references: [id])
   paymentId    String?
   clientSecret String?
   status       paymentStatus  @default(pending)
   createdAt    DateTime       @default(now())
   updatedAt    DateTime       @updatedAt
}

enum paymentStatus {
   pending
   succeeded
   rejected
   refunded
}

enum bookingStatus {
   complete
   cancelled
   pending
   failed
}

enum bookingProcessStatus {
   pending
   inProgress
   completed
   cancelled
}
