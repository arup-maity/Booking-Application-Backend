// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider        = "prisma-client-js"
   previewFeatures = ["driverAdapters"]
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id        Int        @id @default(autoincrement())
   firstName String
   lastName  String
   email     String     @unique
   userAuth  UserAuth?
   Bookings  Bookings[]

   @@map("user")
}

model UserAuth {
   id       Int     @id @default(autoincrement())
   password String?
   method   String
   userId   Int     @unique
   user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AdminUser {
   id            Int            @id @default(autoincrement())
   firstName     String
   lastName      String
   email         String         @unique
   role          AdminUserRole  @default(admin)
   AdminUserAuth AdminUserAuth?

   @@map("admin_user")
}

model AdminUserAuth {
   id       Int       @id @default(autoincrement())
   password String?
   method   String
   userId   Int       @unique
   user     AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum AdminUserRole {
   administrator
   admin
   customerSupport
   technicalSupport
   salesAgent
}

// ////////////////////////////////////////////////////////////////
model Cities {
   id          Int       @id @default(autoincrement())
   cityName    String
   countryName String
   countryCode String
   airports    Airports?
   createdAt   DateTime  @default(now())
   updatedAt   DateTime  @updatedAt
}

model Airports {
   id              Int       @id @default(autoincrement())
   airportName     String
   iataCode        String    @unique
   address         String?
   cityId          Int       @unique
   city            Cities    @relation(fields: [cityId], references: [id], onDelete: Cascade)
   departureFlight Flights[] @relation("departureAirport_airposrt")
   arrivalFlight   Flights[] @relation("arrivalAirport_airposrt")
   createdAt       DateTime  @default(now())
   updatedAt       DateTime  @updatedAt
}

//////////////////////////////////////////////////////////////////////
model Airplanes {
   id           Int       @id @default(autoincrement())
   modelNumber  String
   manufacturer String
   capacity     Int
   Seats        Seats?
   Flights      Flights[]
}

model Seats {
   id          Int       @id @default(autoincrement())
   rowCount    Int
   columnCount Int
   type        String
   airplanesId Int       @unique
   airplanes   Airplanes @relation(fields: [airplanesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

///////////////////////////////////////////////////////////////////////
model Flights {
   id                 Int        @id @default(autoincrement())
   flightNumber       String     @unique
   departureAirportId Int
   departureAirport   Airports   @relation(name: "departureAirport_airposrt", fields: [departureAirportId], references: [id], onDelete: Cascade)
   arrivalAirportId   Int
   arrivalAirport     Airports   @relation(name: "arrivalAirport_airposrt", fields: [arrivalAirportId], references: [id], onDelete: Cascade)
   departureTime      DateTime
   arrivalTime        DateTime
   airplaneId         Int
   airplane           Airplanes  @relation(fields: [airplaneId], references: [id])
   price              Int
   boardingGate       String
   Bookings           Bookings[]
   createdAt          DateTime   @default(now())
   updatedAt          DateTime   @updatedAt
}

///////////////////////////////////////////////////////////////////////
model Bookings {
   id                 Int      @id @default(autoincrement())
   flightId           Int
   flight             Flights  @relation(fields: [flightId], references: [id])
   userId             Int
   user               User     @relation(fields: [userId], references: [id])
   status             String
   numberOfPassengers Int
   totalCost          Decimal  @default(0.00)
   bookingDate        DateTime @default(now())
   createdAt          DateTime @default(now())
   updatedAt          DateTime @updatedAt
}
